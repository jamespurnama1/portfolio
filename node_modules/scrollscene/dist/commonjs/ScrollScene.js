"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollScene = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _scrollmagicWithSsr = _interopRequireDefault(require("./scrollmagic-with-ssr"));

var _lodash = _interopRequireDefault(require("lodash.throttle"));

var _helpers = require("./helpers");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var nameSpace = 'ScrollScene';

var updateTweenProgress = function updateTweenProgress(Scene, Tween, gsapForwardSpeed, gsapReverseSpeed) {
  if (Tween) {
    var progress = Scene.progress();
    var state = Scene.state();

    if (Tween.repeat && Tween.repeat() === -1) {
      if (state === 'DURING' && Tween.paused()) {
        Tween.timeScale(gsapForwardSpeed).play();
      } else if (state !== 'DURING' && !Tween.paused()) {
        Tween.pause();
      }
    } else if (progress != Tween.progress()) {
      if (Scene.duration() === 0) {
        if (progress > 0) {
          Tween.timeScale(gsapForwardSpeed).play();
        } else {
          Tween.timeScale(gsapReverseSpeed).reverse();
        }
      } else {
        Tween.progress(progress).pause();
      }
    }
  }
};

var removeTween = function removeTween(Tween) {
  if (Tween) {
    Tween.pause(0);
    Tween.kill();
  }
};

var setDuration = function setDuration(Scene, duration) {
  if ((0, _helpers.isObject)(duration)) {
    var keys = Object.keys(duration).reverse();

    var fn = function fn() {
      for (var index = 0; index < keys.length; index++) {
        var breakpoint = parseFloat(keys[index]);

        if (breakpoint <= window.innerWidth) {
          Scene.duration(duration[breakpoint]);
          break;
        }
      }
    };

    fn();
    window.addEventListener('resize', (0, _lodash["default"])(fn, 700));
  } else {
    Scene.duration(duration);
  }
};

var setClassName = function setClassName(Scene, options, duration) {
  var toggle = _objectSpread({
    className: null,
    element: null,
    reverse: false
  }, options);

  if (!toggle.className) {
    (0, _helpers.errorLog)(nameSpace, "Be sure to set a className in the new ".concat(nameSpace, "({ toggle: { className: \"my-class\" } })"));
  }

  if (!toggle.element) {
    (0, _helpers.errorLog)(nameSpace, "Be sure to set a const toggleElement = (reactRef.current or document.querySelector) in the new ".concat(nameSpace, "({ toggle: { element: toggleElement } })"));
  }

  var addClassName = function addClassName() {
    return !toggle.element.classList.contains(toggle.className) && toggle.element.classList.add(toggle.className);
  };

  var removeClassName = function removeClassName() {
    return toggle.element.classList.contains(toggle.className) && toggle.element.classList.remove(toggle.className);
  };

  Scene.on('enter', function () {
    addClassName();
  });
  Scene.on('add', function () {
    if (Scene.state() === 'DURING') {
      addClassName();
    }
  });
  Scene.on('leave', function (event) {
    if (!toggle.reverse && duration) {
      event.scrollDirection === 'REVERSE' && removeClassName();
    } else {
      removeClassName();
    }
  });
  Scene.on('remove', function () {
    removeClassName();
  });
};

var setTween = function setTween(Scene, options) {
  var gsap = _objectSpread({
    forwardSpeed: 1,
    reverseSpeed: 1,
    timeline: null
  }, options);

  if (!gsap.timeline) {
    (0, _helpers.errorLog)(nameSpace, "Be sure to set a const tl = gsap.timeline({ paused: true }) in the new ".concat(nameSpace, "({ gsap: { timeline: tl } })"));
  }

  Scene.on('progress', function () {
    updateTweenProgress(Scene, gsap.timeline, gsap.forwardSpeed, gsap.reverseSpeed);
  });
  Scene.on('remove', function () {
    removeTween(gsap.timeline);
  });
};

var globalController;

var ScrollScene = function ScrollScene(_ref) {
  var breakpoints = _ref.breakpoints,
      _ref$controller = _ref.controller,
      controller = _ref$controller === void 0 ? {} : _ref$controller,
      duration = _ref.duration,
      gsap = _ref.gsap,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? 0 : _ref$offset,
      _ref$scene = _ref.scene,
      scene = _ref$scene === void 0 ? {} : _ref$scene,
      toggle = _ref.toggle,
      triggerElement = _ref.triggerElement,
      _ref$triggerHook = _ref.triggerHook,
      triggerHook = _ref$triggerHook === void 0 ? 'onEnter' : _ref$triggerHook,
      _ref$useGlobalControl = _ref.useGlobalController,
      useGlobalController = _ref$useGlobalControl === void 0 ? true : _ref$useGlobalControl;
  var localController;

  if (!useGlobalController) {
    localController = new _scrollmagicWithSsr["default"].Controller(controller);
  }

  if (!globalController && useGlobalController) {
    globalController = new _scrollmagicWithSsr["default"].Controller(controller);
  }

  var controllerIsUse = localController ? localController : globalController;

  if (!triggerElement) {
    (0, _helpers.errorLog)(nameSpace, "Be sure to set a const triggerElement = (reactRef.current or document.querySelector) in the new ".concat(nameSpace, "({ triggerElement: triggerElement })"));
  }

  var Scene = new _scrollmagicWithSsr["default"].Scene(_objectSpread({
    triggerElement: triggerElement,
    triggerHook: triggerHook,
    offset: offset
  }, scene));

  if (duration) {
    setDuration(Scene, duration);
  }

  if (toggle && (0, _helpers.isObject)(toggle)) {
    setClassName(Scene, toggle, duration);
  }

  if (gsap && (0, _helpers.isObject)(gsap)) {
    setTween(Scene, gsap);
  }

  this.init = function () {
    controllerIsUse && Scene.addTo(controllerIsUse);
  };

  this.destroy = function () {
    Scene.remove();
  };

  this.Scene = Scene;
  this.Controller = controllerIsUse;
  (0, _helpers.scrollAnimationInit)(breakpoints, this.init, this.destroy);
};

exports.ScrollScene = ScrollScene;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,